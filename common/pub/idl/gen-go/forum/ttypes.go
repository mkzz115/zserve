// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package forum

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/mkzz115/zserve/common/pub/idl/gen-go/base"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
var GoUnusedProtection__ int

// Attributes:
//  - UID
//  - Topic
//  - Content
//  - PublishTs
type PublishArticleReq struct {
	UID       int64  `thrift:"Uid,1" json:"Uid"`
	Topic     string `thrift:"Topic,2" json:"Topic"`
	Content   string `thrift:"Content,3" json:"Content"`
	PublishTs int64  `thrift:"PublishTs,4" json:"PublishTs"`
}

func NewPublishArticleReq() *PublishArticleReq {
	return &PublishArticleReq{}
}

func (p *PublishArticleReq) GetUID() int64 {
	return p.UID
}

func (p *PublishArticleReq) GetTopic() string {
	return p.Topic
}

func (p *PublishArticleReq) GetContent() string {
	return p.Content
}

func (p *PublishArticleReq) GetPublishTs() int64 {
	return p.PublishTs
}
func (p *PublishArticleReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PublishArticleReq) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *PublishArticleReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *PublishArticleReq) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *PublishArticleReq) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PublishTs = v
	}
	return nil
}

func (p *PublishArticleReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PublishArticleReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PublishArticleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Uid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Uid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Uid: ", p), err)
	}
	return err
}

func (p *PublishArticleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Topic", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Topic (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Topic: ", p), err)
	}
	return err
}

func (p *PublishArticleReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Content", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Content: ", p), err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Content (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Content: ", p), err)
	}
	return err
}

func (p *PublishArticleReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PublishTs", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:PublishTs: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PublishTs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PublishTs (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:PublishTs: ", p), err)
	}
	return err
}

func (p *PublishArticleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishArticleReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - ErrInfo
type PublishArticleRes struct {
	Status *int32 `thrift:"Status,1" json:"Status,omitempty"`
	// unused fields # 2 to 99
	ErrInfo *base.ErrorInfo `thrift:"ErrInfo,100" json:"ErrInfo,omitempty"`
}

func NewPublishArticleRes() *PublishArticleRes {
	return &PublishArticleRes{}
}

var PublishArticleRes_Status_DEFAULT int32

func (p *PublishArticleRes) GetStatus() int32 {
	if !p.IsSetStatus() {
		return PublishArticleRes_Status_DEFAULT
	}
	return *p.Status
}

var PublishArticleRes_ErrInfo_DEFAULT *base.ErrorInfo

func (p *PublishArticleRes) GetErrInfo() *base.ErrorInfo {
	if !p.IsSetErrInfo() {
		return PublishArticleRes_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}
func (p *PublishArticleRes) IsSetStatus() bool {
	return p.Status != nil
}

func (p *PublishArticleRes) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *PublishArticleRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 100:
			if err := p.readField100(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PublishArticleRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *PublishArticleRes) readField100(iprot thrift.TProtocol) error {
	p.ErrInfo = &base.ErrorInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ErrInfo), err)
	}
	return nil
}

func (p *PublishArticleRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PublishArticleRes"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField100(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PublishArticleRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("Status", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Status (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Status: ", p), err)
		}
	}
	return err
}

func (p *PublishArticleRes) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrInfo() {
		if err := oprot.WriteFieldBegin("ErrInfo", thrift.STRUCT, 100); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 100:ErrInfo: ", p), err)
		}
		if err := p.ErrInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ErrInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 100:ErrInfo: ", p), err)
		}
	}
	return err
}

func (p *PublishArticleRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishArticleRes(%+v)", *p)
}
